#!/usr/bin/env bash

# bash-monitor
# A simple bash script to see better some informations
# as brightness, volume, wireless signal and more.
#
# Created by: Murilo "Mur" Geraldini
# Version 1.0

# Variables that don't need to be uptade when the script is running.
DEPEN=0
VERSION=1.1

# === Imports ===
source config

# === Functions ===
help_text() {
    #Help text shown when -h flag is passed 
    cat <<EOF

Usage: $(basename $0) [OPTIONS] [VALUE]
A simple system controller using bash.

Options:

-h               Show this text and exit.
-t    [VALUE]    Setup the update time of the data in seconds.
                 Default is $SLEEPTIME seconds.
-v               Prints version information.

EOF
exit 0
}

help_menu() {
    #Function that shows a help menu when the script is running
    while :; do

        clear
        cat <<EOF
Simple help text showing all keyboard keys that can be used to 
control somethings on PC:
IMPORTANT: Almost all commands have to be used on the control panel
$(basename "$0") is case sensitive

Basic control:
    <q>     Exit this menu or close the script if on the control panel
    <h>     Access this menu

Brightness control:
    <$BRIGHT_UP>     Increases brightness by $BRIGHT_INC
    <$BRIGHT_DOWN>     Decreases brightness by $BRIGHT_DEC
    <$BRIGHT_MANUAL>     Manual input brightness value
            You can input values in 0-100 gap, any other input will change
            your brightness (For example, inputting characters or negative numbers)

Volume control:
    <$VOL_UP>    Increases audio by $VOLUME_INC
    <$VOL_DOWN>     Decreases audio by $VOLUME_DEC
    <$VOL_MANUAL>     Manual input audio value
    <$MUTE_TOGGLE>     Toogle mute/unmute

EOF
        read -n 1 -t $SLEEPTIME
        case $REPLY in
            "q") break ;;
        esac
    done
}

version () {
    # A simple function to show the version of the script.
    echo
    echo "You're running $(basename $0) in version: $VERSION"
    echo
    exit 0
}
volume_info() {
    echo " ─── Volume ─────────────────────────────────────────"
    echo -e "\t Volume:\t\t$VOLUME_STATUS% - Muted: ${MUTE_STATUS^^}"
}

brightness_info() {
    echo " ─── Brightness ─────────────────────────────────────"
    echo -e "\tBrightness:\t\t$BRIGHTNESS_PERCENT%"
}

wireless_info() {
    echo " ─── Wireless ───────────────────────────────────────"
    echo -e "\tWireless:\t\t$WIRELESS_ESSID" 
}

brightness_up() {
    if [[ "$BRIGHT_CMD" == "light" ]]; then
        light -A "$BRIGHT_INC" 2>&1 | sed -e "s/^/$(date) /" >> $LOG_FILE
    else
        xbacklight -inc "$BRIGHT_INC" 2>&1 | sed -e "s/^/$(date) /" >> $LOG_FILE
    fi
}

brightness_down() {
    if [[ "$BRIGHT_CMD" == "light" ]]; then
        light -U "$BRIGHT_DEC" 2>&1 | sed -e "s/^/$(date) /" >> $LOG_FILE
    else
        xbacklight -dec "$BRIGHT_DEC" 2>&1 | sed -e "s/^/$(date) /" >> $LOG_FILE
    fi
}

brightness_set() {
    if [[ "$BRIGHT_CMD" == "light" ]]; then
        light -S $1 2>&1 | sed -e "s/^/$(date) /" >> $LOG_FILE  
    else
        xbacklight -set $1 2>&1 | sed -e "s/^/$(date) /" >> $LOG_FILE
    fi
}

brightness_control() {
    # A simple function to control the brightness 
    if [[ "$REPLY" = "$BRIGHT_UP" ]]; then
        brightness_up
    elif [[ "$REPLY" = "$BRIGHT_DOWN" ]]; then
        brightness_down
    elif [[ "$REPLY" = "$BRIGHT_MANUAL" ]]; then
        echo -ne "\n\n> Enter a brightness value: "
        read
        brightness_set $REPLY
    fi
}


volume_control() {
    # A simple function to control volume
    if [[ "$REPLY" = "$VOL_UP" ]] && [[ "$VOLUME_STATUS" -lt "$VOLUME_LIMIT" ]]; then
        pactl set-sink-volume 0 "+$VOLUME_INC%" 2>&1 | sed -e "s/^/$(date) /" >> $LOG_FILE 
    elif [[ "$REPLY" = "$VOL_DOWN" ]]; then
        pactl set-sink-volume 0 "-$VOLUME_DEC%" 2>&1 | sed -e "s/^/$(date) /" >> $LOG_FILE  
    elif [[ "$REPLY" = "$VOL_MANUAL" ]]; then
        echo -ne "\n\n> Enter a volume value: "
        read
        pactl set-sink-volume 0 "$REPLY"% 2>&1 | sed -e "s/^/$(date) /" >> $LOG_FILE
    elif [[ "$REPLY" = "$MUTE_TOGGLE" ]]; then
        pactl set-sink-mute 0 toggle 2>&1 | sed -e "s/^/$(date) /" >> $LOG_FILE  
    fi
}

# === Main script ===

# Loop to get options.
while getopts "ht:v" OPT; do

    # Working with options using case.
    case $OPT in
       "h") help_text         ;; 
       "t") SLEEPTIME=$OPTARG ;;
       "v") version           ;; 
    esac
done

# Choosing brightness command
if [[ "$BRIGHT_CMD" != "light" ]] && [[ "$BRIGHT_CMD" != "xbacklight" ]]; then
    while :; do
        clear
        echo -e "\nWhat do you prefer as your light command?"
        echo "[1] light"
        echo "[2] xbacklight"
        echo "You can change it later in config file"
        echo -n "> "
        read

        if [[ "$REPLY" -eq "1" ]]; then
            sed -i '$ d' config
            echo 'BRIGHT_CMD="light"' >> config
            break
        elif [[ "$REPLY" -eq "2" ]]; then
            sed -i '$ d' config
            echo 'BRIGHT_CMD="xbacklight"' >> config
            break
        else
            echo -e "\nChoose a valid option!"
            read -n 1
        fi
    done

    # Updating vars in config
    source config 
fi

# Looking for dependencies
if ! command -v pactl &>/dev/null; then
    echo "You need pactl to run $(basename "$0")"
    DEPEN=1
fi

if ! command -v acpi &>/dev/null; then
    echo "You need acpi to run $(basename "$0")"
    DEPEN=1
fi

if ! command -v $BRIGHT_CMD &>/dev/null; then
    echo "You need $BRIGHT_CMD to run $(basename "$0")"
    DEPEN=1
fi

[[ $DEPEN -eq 1 ]] && exit 1

# Main loop.
while :; do 

    # Variables inside the while loop to be always update.
    BATT_STATUS=$( acpi -b | sed 's/.*: \([a-zA-Z]*\),.*/\1/gi' ) 
    BATT_CHARGE=$( acpi -b | sed 's/.*[charging|unknown], \([0-9]*\)%.*/\1/gi' )
    BRIGHTNESS_PERCENT=$(light)
    VOLUME_STATUS=$(pactl list sinks | grep '^[[:space:]]Volume:' | head -n $(($SINK + 1 )) | tail -n 1 | sed -e 's,.* \([0-9][0-9]*\)%.*,\1,') 
    MUTE_STATUS=$(pacmd list-sinks | awk '/muted/ { print $2 }')
    WIRELESS_ESSID=$([[ "$(iwgetid -r)" == "" ]] && printf "Disconnected" || printf "$(iwgetid -r)")
    clear
    
    # Showing informations and calling mainly functions
    echo -e "\t\tControl Panel"
    echo
    echo -e "\tBattery   \t\t$BATT_CHARGE% - $BATT_STATUS"
    echo
    wireless_info
    echo
    volume_info
    echo
    brightness_info
    echo
    echo -e "\n\n"
    echo -n "Press <q> to exit"
    echo -e "\tPress <h> to open help menu"

    # Used to get all keys tapped
    read -n 1 -t $SLEEPTIME

    # Case used to manager mainly keys 
    case $REPLY in 
        "q") clear; exit 0  ;;
        "h") help_menu      ;;
    esac

    # Calling all control functions
    brightness_control
    volume_control
done
